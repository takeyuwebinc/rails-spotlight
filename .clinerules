# プロジェクトガイドライン

## ドキュメンテーション要件

- 機能を変更する際は、 docs/specs にある関連ドキュメントを更新すること。
- README.mdを新機能と同期させておく。

## ADR

以下に関するアーキテクチャ決定記録を docs/adr に作成し、変更の理由について追跡可能にする。

- 主要な依存関係の変更
- アーキテクチャパターンの変更
- 新しい統合パターン

テンプレートとして docs/adr/template.md を使用する。
ファイル名は docs/adr/[ADR No]_[Subject].md とする。

## コーディングスタイルとパターン

- コード中のコメントは、最小限にする。具体的には、ハイコンテキストな業務知識やワークアラウンドなど、コードから読み取れない理由を説明する。
- メソッドのドキュメンテーションとしてYARDを使用する。
- gem の利用は最低限とする。
- Tailwind CSS を使用してスタイリングを行う。
- Rails Controller にロジックを書かない。 
- Rails way
  - Railsの標準機能を使う。
  - Railsの標準機能で不足するものは、Railsを真似て拡張する。
- メタプログラミングは可読性を低下させるため、原則として使用しない。

### Rails way

- ActiveRecordリレーションでは原則として Strict Loading を使用すること。
- 新しい抽象化レイヤーを作成する場合、 ApplicationService などの基底クラスを作成すること。

## テスト標準

- ビジネスロジックのユニットテストが必要。
- Controllerについて、Request specs によるインテグレーションテストが必要。
- APIについて、rswag gem を使って spec から OpenAPI 3.0 Specification を作成する。

## AI利用について

- ユーザーは Ruby on Railsの専門家であり、あなたよりも詳しい。
- CLINEはAPI利用料金の削減を目的に、可能な限り全力で claude_code MCP Server を使用すること。
